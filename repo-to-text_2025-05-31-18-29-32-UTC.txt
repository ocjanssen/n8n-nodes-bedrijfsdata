Directory: nodes

Directory Structure:
```
.
nodes
└── nodes/Bedrijfsdata
    ├── nodes/Bedrijfsdata/Bedrijfsdata.node.json
    ├── nodes/Bedrijfsdata/Bedrijfsdata.node.ts
    ├── nodes/Bedrijfsdata/CompaniesGet.properties.ts
    ├── nodes/Bedrijfsdata/GenericFunctions.ts
    └── nodes/Bedrijfsdata/logo.svg

```

Contents of Bedrijfsdata/Bedrijfsdata.node.ts:
```
import {
	INodeType,
	INodeTypeDescription,
	NodeConnectionType,
	ILoadOptionsFunctions,
	INodeListSearchResult,
	NodeOperationError,
	IExecutePaginationFunctions,
	IExecuteSingleFunctions,
	INodeExecutionData,
	IDataObject,
	DeclarativeRestApiSettings,
} from 'n8n-workflow';
import { apiRequest } from './GenericFunctions';
import { companiesGetOperationProperties } from './CompaniesGet.properties';

export class Bedrijfsdata implements INodeType {
	description: INodeTypeDescription = {
		name: 'bedrijfsdata',
		displayName: 'Bedrijfsdata',
		icon: 'file:logo.svg',
		group: ['transform'],
		version: 1,
		subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
		description: 'Get data from the Bedrijfsdata API.',
		defaults: {
			name: 'Bedrijfsdata',
		},
		inputs: [NodeConnectionType.Main],
		outputs: [NodeConnectionType.Main],
		credentials: [
			{
				name: 'bedrijfsdataApi',
				required: true,
			},
		],
		requestDefaults: {
			baseURL: 'https://api.bedrijfsdata.nl/v1.1',
			headers: {
				'Accept': 'application/json',
			}
		},
		properties: [
			{
				displayName: 'Resource',
				name: 'resource',
				type: 'options',
				noDataExpression: true,
				options: [
					{
						name: 'Company',
						value: 'companies',
					},
				],
				default: 'companies',
			},
			{
				displayName: 'Return All',
				name: 'returnAll',
				type: 'boolean',
				default: false,
				description: 'Whether to return all results or only up to a given limit',
				displayOptions: {
					show: {
						resource: ['companies'],
						operation: ['get'],
					},
				},
			},
			{
				displayName: 'Limit',
				name: 'limit',
				type: 'number',
				default: 50,
				description: 'Max number of results to return',
				typeOptions: {
					minValue: 1,
				},
				displayOptions: {
					show: {
						resource: ['companies'],
						operation: ['get'],
						returnAll: [false],
					},
				},
			},
			{
				displayName: 'Operation',
				name: 'operation',
				type: 'options',
				noDataExpression: true,
				displayOptions: {
					show: {
						resource: ['companies'],
					},
				},
				options: [
					{
						name: 'Get Many',
						value: 'get',
						action: 'Search companies',
						description: 'Retrieve company profiles with advanced filtering options',
						routing: {
							request: {
								method: 'GET',
								url: '/companies',
								qs: {
									start: '={{ !$parameter.returnAll && $parameter.paginationOptions && ($parameter.paginationOptions.start === 0 || $parameter.paginationOptions.start) ? $parameter.paginationOptions.start : undefined }}',
									page: '={{ !$parameter.returnAll && $parameter.paginationOptions && $parameter.paginationOptions.page && !($parameter.paginationOptions.start === 0 || $parameter.paginationOptions.start) ? $parameter.paginationOptions.page : undefined }}',
									rows: '={{ !$parameter.returnAll ? ($parameter.limit ? $parameter.limit : ($parameter.paginationOptions && $parameter.paginationOptions.rows ? $parameter.paginationOptions.rows : 10)) : undefined }}',
								},
							},
							send: {
								paginate: '={{ $parameter.returnAll }}',
							},
							operations: {
								async pagination(this: IExecutePaginationFunctions, requestOptions: DeclarativeRestApiSettings.ResultOptions): Promise<INodeExecutionData[]> {
									const allResults: INodeExecutionData[] = [];
									let currentPage = 1;
									const pageSize = this.getNodeParameter('paginationOptions.rows', 0) as number || 10;
									const userStartOffset = this.getNodeParameter('paginationOptions.start', 0) as number;

									if (!requestOptions.options) {
										requestOptions.options = {};
									}
									if (!requestOptions.options.qs) {
										requestOptions.options.qs = {};
									}

									let currentOffset = userStartOffset >= 0 ? userStartOffset : 0;
									let useStartParameter = userStartOffset >= 0;

									let keepGoing = true;
									while (keepGoing) {
										requestOptions.options.qs.rows = pageSize;
										if (useStartParameter) {
											requestOptions.options.qs.start = currentOffset;
											delete requestOptions.options.qs.page;
										} else {
											requestOptions.options.qs.page = currentPage;
											delete requestOptions.options.qs.start;
										}

										const response = await this.makeRoutingRequest(requestOptions);
										let items: any[] = [];
										const responseData = response[0]?.json as IDataObject | any[];

										if (Array.isArray(responseData)) {
											items = responseData;
										} else if (responseData && Array.isArray(responseData.companies)) {
											items = responseData.companies;
										} else if (responseData && Array.isArray(responseData.data)) {
											items = responseData.data;
										} else {
											this.logger.warn('Pagination: Unexpected response structure or no items array found.');
											keepGoing = false;
											break;
										}

										if (items.length === 0) {
											keepGoing = false;
										} else {
											allResults.push(...items.map(item => ({ json: item })));
											if (items.length < pageSize) {
												keepGoing = false;
											} else {
												if (useStartParameter) {
													currentOffset += pageSize;
												} else {
													currentPage++;
												}
											}
										}
									}
									return allResults;
								},
							},
							output: {
								postReceive: [
									async function (this: IExecuteSingleFunctions, items: INodeExecutionData[]): Promise<INodeExecutionData[]> {
										if (this.getNodeParameter('returnAll', 0) as boolean) {
											return items;
										}

										const responseData = items[0]?.json as IDataObject | any[];
										let companies: any[] = [];

										if (Array.isArray(responseData)) {
											companies = responseData;
										} else if (responseData && Array.isArray(responseData.companies)) {
											companies = responseData.companies;
										} else if (responseData && Array.isArray(responseData.data)) {
											companies = responseData.data;
										} else {
											this.logger.warn('Single Page: Unexpected response structure or no items array found.');
											return this.helpers.returnJsonArray([]);
										}
										return this.helpers.returnJsonArray(companies);
									},
								],
							},
						},
					},
				],
				default: 'get',
			},
			// Spread the imported Companies Get operation properties
			...companiesGetOperationProperties,
		],
	};

	methods = {
        listSearch: {
            async getCities(this: ILoadOptionsFunctions, query?: string): Promise<INodeListSearchResult> {
                try {
                    type SuggestApiResponse = {
                        status: string;
                        found: number;
                        suggest: Array<{ term: string }>;
                        message?: string;
                    };

                    const response = await apiRequest.call(this, 'GET', 'suggest', {}, {
                        type: 'city',
                        q: query,
                    }) as SuggestApiResponse;

                    if (response && response.status === 'ok' && Array.isArray(response.suggest)) {
                        return {
                            results: response.suggest.map(item => ({
                                name: item.term,
                                value: item.term,
                            })),
                        };
                    } else {
                        const errorMessage = response?.message || 'Unexpected API response from /suggest endpoint';
                        throw new NodeOperationError(this.getNode(), `Failed to fetch cities: ${errorMessage}`);
                    }
                } catch (error) {
                    if (error instanceof NodeOperationError) {
                        throw error;
                    }
                    const message = (error as Error).message || 'Unknown error during API request';
                    throw new NodeOperationError(this.getNode(), `Error fetching cities: ${message}`);
                }
            }
        },
};
}

```

Contents of Bedrijfsdata/Bedrijfsdata.node.json:
```
{
	"node": "n8n-nodes-base.Bedrijfsdata",
	"nodeVersion": "1.0",
	"codexVersion": "1.0",
	"categories": [
		"Marketing",
        "Sales",
        "Data & Storage"
	],
	"resources": {
		"credentialDocumentation": [
			{
				"url": "https://docs.bedrijfsdata.nl/"
			}
		],
		"primaryDocumentation": [
			{
				"url": "https://docs.bedrijfsdata.nl/"
			}
		]
	}
}

```

Contents of Bedrijfsdata/GenericFunctions.ts:
```
import type {
	IDataObject,
	IExecuteFunctions,
	IHookFunctions,
	IHttpRequestMethods,
	ILoadOptionsFunctions,
	IRequestOptions,
} from 'n8n-workflow';

export async function apiRequest(
	this: IHookFunctions | IExecuteFunctions | ILoadOptionsFunctions,
	method: IHttpRequestMethods,
	endpoint: string,
	body: object = {},
	query?: IDataObject,
): Promise<any> {
	query = query || {};

	const options: IRequestOptions = {
		method,
		body,
		qs: query,
		uri: `https://api.bedrijfsdata.nl/v1.1/${endpoint}`,
		json: true,
	};

	if (method === 'GET') {
		delete options.body;
	}

	return await this.helpers.requestWithAuthentication.call(this, 'bedrijfsdataApi', options);
}

```

Contents of Bedrijfsdata/CompaniesGet.properties.ts:
```
import { INodeProperties } from 'n8n-workflow';

export const companiesGetOperationProperties: INodeProperties[] = [
	{
		displayName: 'Country',
		name: 'country',
		type: 'options',
		default: 'nl',
		options: [{ name: 'The Netherlands', value: 'nl' }],
		displayOptions: {
			show: {
				resource: ['companies'],
				operation: ['get'],
			},
		},
		routing: {
			request: {
				qs: {
					country: '={{ $value ? $value : undefined }}',
                    and_or: 'AND'
				},
			},
		},
		required: true,
	},
    {
		displayName: 'Output Detailed Results',
        name: 'details',
        type: 'boolean',
        default: false,
        description: 'Whether to add query details such as the total companies found',
        displayOptions: {
            show: {
                resource: ['companies'],
                operation: ['get']
            },
        },
        routing: {
            request: {
                qs: {
                    front: '={{ $value && $value === true ? 30 : 25  }}'
                },
            },
        },
	},
    {
        displayName: 'Results Breakdown',
        name: 'facets',
        type: 'multiOptions',
        default: [],
        options: [
            { name: 'Apps Categories', value: 'apps_cat' },
            { name: 'Data Availability', value: 'data_exists' },
            { name: 'Number of Employees', value: 'employees_range' },
            { name: 'Organization Type', value: 'orgtype' },
            { name: 'Province', value: 'province' },
            { name: 'Revenue', value: 'revenue_range' },
            { name: 'SBI', value: 'sbi' },
        ],
        routing: {
            request: {
                qs: {
                    facets: '={{ $value ? $value.join(",") : undefined }}',
                },
            },
        },
        displayOptions: {
            show: {
                resource: ['companies'],
                operation: ['get'],
                details: [true],
            },
        },
        description: 'Add a breakdown of results by several categories',
    },
	{
		displayName: 'Filter in JSON',
        name: 'simplify',
        type: 'boolean',
        default: false,
        description: 'Whether to use JSON to query our database (recommended for AI agents and power users)',
        displayOptions: {
            show: {
                resource: ['companies'],
                operation: ['get']
            },
        },
	},
    {
        displayName: 'JSON Query',
        name: 'filterJson',
        type: 'json',
        default: '{}',
        placeholder: '{ "name": "Example BV", "city": "Amsterdam" }',
        displayOptions: {
            show: {
                resource: ['companies'],
                operation: ['get'],
                simplify: [true],
            },
        },
        routing: {
            request: { // THIS IS VALID SYNTAX FOR N8N!
							// @ts-ignore
                qs: '={{ $value ? JSON.parse($value) : {} }}',
            },
        },
        description: 'Advanced JSON input for filter options. Keys should match API parameters (name, city, coc, etc). Complex queries are available through Solr operators, such as "OR", "AND", "(", ")", etc. See documentation for details.',
    },
    {
		displayName: 'Search Specific Companies/groups',
		name: 'idFilterOptions',
		type: 'collection',
		default: {},
		placeholder: 'Add Filter',
        description: 'Search for specific companies or groups by their unique identifiers',
		displayOptions: {
			show: {
				resource: ['companies'],
				operation: ['get'],
                simplify: [false],
			},
		},
		options: [
            {
                displayName: 'Bedrijfsdata.nl ID',
                name: 'id',
                type: 'string',
                default: '',
                description: 'Bedrijfsdata.nl ID of a specific company',
                routing: {
                    request: {
                        qs: {
                            id: '={{ $value ? $value : undefined }}',
                        },
                    },
                },
            },
            {
                displayName: 'Chamber of Commerce (KvK) Number',
                name: 'coc',
                type: 'string',
                default: '',
                description: 'Dutch Chamber of Commerce (KvK) number of a specific company',
                routing: {
                    request: {
                        qs: {
                            coc: '={{ $value ? $value : undefined }}',
                        },
                    },
                },
            },
            {
                displayName: 'Company Name',
                name: 'name',
                type: 'string',
                default: '',
                description: 'Search companies by official name',
                routing: {
                    request: {
                        qs: {
                            name: '={{ $value ? $value : undefined }}',
                        },
                    },
                },
            },
            {
                displayName: 'Domain Name',
                name: 'domain',
                type: 'string',
                default: '',
                description: 'Search companies by domain name(s). Comma separate multiple domains.',
                routing: {
                    request: {
                        qs: {
                            domain: '={{ $value ? $value : undefined }}',
                        },
                    },
                },
            },
            {
                displayName: 'Trade Name',
                name: 'names',
                type: 'string',
                default: '',
                description: 'Search companies by all known names, such as trade names. Comma separate multiple values.',
                routing: {
                    request: {
                        qs: {
                            names: '={{ $value ? $value : undefined }}',
                        },
                    },
                },
            },
            {
                displayName: 'VAT Number',
                name: 'vat',
                type: 'string',
                default: '',
                description: 'Search companies by tax registration number (btw nummer)',
                routing: {
                    request: {
                        qs: {
                            vat: '={{ $value ? $value : undefined }}',
                        },
                    },
                },
            },
        ],
    },
    {
		displayName: 'Basic Filters',
		name: 'basicFilterOptions',
		type: 'collection',
		default: {},
		placeholder: 'Add basic filter',
        description: 'Search companies by basic attributes',
		displayOptions: {
			show: {
				resource: ['companies'],
				operation: ['get'],
                simplify: [false],
			},
		},
		options: [
            {
                displayName: 'Data Availablility',
                name: 'data_exists',
                type: 'multiOptions',
                default: [],
                options: [
                    { name: 'Address Available', value: 'address' },
                    { name: 'Email Available', value: 'email' },
                    { name: 'Phone Available', value: 'phone' },
                    { name: 'URL Available', value: 'url' },
                    { name: 'VAT Available', value: 'vat' },
                ],
                routing: {
                    request: {
                        qs: {
                            data_exists: '={{ $value ? $value.join(",") : undefined }}',
                        },
                    },
                },
                description: 'Search companies by available data types',
            },
            {
                displayName: 'Number of Employees (Est)',
                name: 'employees',
                type: 'string',
                default: '',
                placeholder: 'e.g., 5:10 or 5: or :10',
                routing: {
                    request: {
                        qs: {
                            employees: '={{ $value ? $value : undefined }}',
                        },
                    },
                },
                description: 'Search by (estimated) number of employees. Format: Range (5:10), Minimum only (5:), Maximum only (:10).',
            },
            {
                displayName: 'Office Type',
                name: 'office_type',
                type: 'options',
                default: 'Hoofdvestiging',
                options: [
                    { name: 'All', value: '' },
                    { name: 'Hoofdvestiging', value: 'Hoofdvestiging' },
                    { name: 'Nevenvestiging', value: 'Nevenvestiging' },
                ],
                routing: {
                    request: {
                        qs: {
                            office_type: '={{ $value ? $value : undefined }}',
                        },
                    },
                },
                description: 'Search companies by registration type',
            },
            {
                displayName: 'Organization Type',
                name: 'orgtype',
                type: 'multiOptions',
                default: [],
                options: [
                    { name: 'Besloten Vennootschap', value: 'Besloten Vennootschap' },
                    { name: 'Buitenlandse Rechtsvorm', value: 'Buitenlandse Rechtsvorm' },
                    { name: 'Commanditaire Vennootschap', value: 'Commanditaire Vennootschap' },
                    { name: 'Coöperatie', value: 'Coöperatie' },
                    { name: 'Eenmanszaak', value: 'Eenmanszaak' },
                    { name: 'Kerkgenootschap', value: 'Kerkgenootschap' },
                    { name: 'Maatschap', value: 'Maatschap' },
                    { name: 'Naamloze Vennootschap', value: 'Naamloze Vennootschap' },
                    { name: 'Onderlinge Waarborg Maatschappij', value: 'Onderlinge Waarborg Maatschappij' },
                    { name: 'Publiekrechtelijke Rechtspersoon', value: 'Publiekrechtelijke Rechtspersoon' },
                    { name: 'Rechtspersoon In Oprichting', value: 'Rechtspersoon in oprichting' },
                    { name: 'Rederij', value: 'Rederij' },
                    { name: 'Stichting', value: 'Stichting' },
                    { name: 'Vennootschap Onder Firma', value: 'Vennootschap Onder Firma' },
                    { name: 'Vereniging', value: 'Vereniging' },
                ],
                routing: {
                    request: {
                        qs: {
                            orgtype: '={{ $value ? $value.join(",") : undefined }}',
                        },
                    },
                },
                description: 'Filter companies by organisation type',
            },
            {
                displayName: 'Revenue (Est)',
                name: 'revenue',
                type: 'string',
                default: '',
                placeholder: 'e.g., 500000:1000000 or 500000: or :1000000',
                routing: {
                    request: {
                        qs: {
                            revenue: '={{ $value ? $value : undefined }}',
                        },
                    },
                },
                description: 'Search by (estimated) annual revenue. Format: Range (500000:1000000), Minimum only (500000:), Maximum only (:1000000).',
            },
            {
                displayName: 'Year Founded',
                name: 'founded',
                type: 'string',
                default: '',
                placeholder: 'e.g., 2010:2020 or 2010: or :2020',
                routing: {
                    request: {
                        qs: {
                            founded: '={{ $value ? $value : undefined }}',
                        },
                    },
                },
                description: 'Search by year of establishment. Format: Range (2010:2020), Minimum only (2010:), Maximum only (:2020).',
            },
		],
	},
    {
		displayName: 'Keyword Filters',
		name: 'keywordFilterOptions',
		type: 'collection',
		default: {},
		placeholder: 'Add keyword filter',
        description: 'Search companies by keyword. Companies with matching industries, activities, names and website content are returned.',
		displayOptions: {
			show: {
				resource: ['companies'],
				operation: ['get'],
                simplify: [false],
			},
		},
		options: [
            {
                displayName: 'Required Keywords',
                name: 'AND_text',
                type: 'string',
                default: '',
                routing: {
                    request: {
                        qs: {
                            AND_text: '={{ $value ? $value : undefined }}',
                        },
                    },
                },
                description: 'Companies matching all keywords you provide here are returned. Comma separate multiple values.',
            },
            {
                displayName: 'Optional Keywords',
                name: 'OR_text',
                type: 'string',
                default: '',
                routing: {
                    request: {
                        qs: {
                            OR_text: '={{ $value ? $value : undefined }}',
                        },
                    },
                },
                description: 'Companies matching all at least one keyword you provide here are returned. Comma separate multiple values.',
            },
            {
                displayName: 'Exclude Keywords',
                name: 'NOT_text',
                type: 'string',
                default: '',
                routing: {
                    request: {
                        qs: {
                            NOT_text: '={{ $value ? $value : undefined }}',
                        },
                    },
                },
                description: 'Companies matching none of the keywords you provide here are returned. Comma separate multiple values.',
            },
        ],
    },
    {
		displayName: 'Industry (SBI) Filters',
		name: 'industryFilterOptions',
		type: 'collection',
		default: {},
		placeholder: 'Add industry filter',
        description: 'Search companies by SBI code (Standaard Bedrijfsindeling 2008)',
		displayOptions: {
			show: {
				resource: ['companies'],
				operation: ['get'],
                simplify: [false],
			},
		},
		options: [
            {
                displayName: 'Include SBI Code(s)',
                name: 'OR_sbi',
                type: 'string',
                default: '',
                routing: {
                    request: {
                        qs: {
                            OR_sbi: '={{ $value ? $value : undefined }}',
                        },
                    },
                },
                description: 'Search by industry SBI-code. Use numerical codes without dots (e.g., "01303, 01304"). Comma separate multiple values.',
            },
            {
                displayName: 'Exclude SBI Code(s)',
                name: 'NOT_sbi',
                type: 'string',
                default: '',
                routing: {
                    request: {
                        qs: {
                            NOT_sbi: '={{ $value ? $value : undefined }}',
                        },
                    },
                },
                description: 'Exclude companies by industry SBI-code. Use numerical codes without dots (e.g., "01303, 01304"). Comma separate multiple values',
            },
        ],
    },
    {
		displayName: 'Location Filters',
		name: 'locationFilterOptions',
		type: 'collection',
		default: {},
		placeholder: 'Add location filter',
        description: 'Search companies by registration address',
		displayOptions: {
			show: {
				resource: ['companies'],
				operation: ['get'],
                simplify: [false],
			},
		},
		options: [
            {
                displayName: 'Address ID',
                name: 'addressid',
                type: 'string',
                default: '',
                placeholder: 'e.g., NL1234AB-150',
                routing: {
                    request: {
                        qs: {
                            addressid: '={{ $value ? $value : undefined }}',
                        },
                    },
                },
                description: 'Search companies by Dutch address. Format: NL{postcode}-{house number}, e.g., "NL1234AB-150".',
            },
            {
                displayName: 'City',
                name: 'city',
                type: 'resourceLocator',
                default: { mode: 'list', value: '' },
                modes: [
                    {
                        displayName: 'From List',
                        name: 'list',
                        type: 'list',
                        placeholder: 'Search for a city',
                        typeOptions: {
                            searchListMethod: 'getCities',
                            searchable: true,
                            searchFilterRequired: false,
                        },
                    },
                ],
                routing: {
                    request: {
                        qs: {
                            city: '={{ $value ? $value : undefined }}',
                        },
                    },
                },
                description: 'Search companies by Dutch city. Must exact-match the official name (case sensitive).',
            },
            {
                displayName: 'Coordinates',
                name: 'geo',
                type: 'string',
                default: '',
                placeholder: 'e.g., 52.3676,4.9041',
                routing: {
                    request: {
                        qs: {
                            geo: '={{ $value ? $value : undefined }}',
                        },
                    },
                },
                description: 'Search companies by coordinates [lat],[long]. Combine with "distance" to specify regions. Alternative to location',
            },
            {
                displayName: 'Distance (Km)',
                name: 'distance',
                type: 'number',
                default: '',
                routing: {
                    request: {
                        qs: {
                            distance: '={{ $value ? $value : undefined }}',
                        },
                    },
                },
                description: 'Number of kilometers around "location" or "coordinates (geo)" to search. Cannot be combined with city/province/addressid.',
            },
            {
                displayName: 'Location',
                name: 'location',
                type: 'string',
                default: '',
                routing: {
                    request: {
                        qs: {
                            location: '={{ $value ? $value : undefined }}',
                        },
                    },
                },
                description: 'Search companies in an area by place/municipality. Combine with "distance" to specify regions. Alternative to city/province/addressid',
            },
            {
                displayName: 'Postcode',
                name: 'postcode',
                type: 'string',
                default: '',
                routing: {
                    request: {
                        qs: {
                            postcode: '={{ $value ? $value : undefined }}',
                        },
                    },
                },
                description: 'Search companies by Dutch postcode',
            },
            {
                displayName: 'Province',
                name: 'province',
                type: 'multiOptions',
                default: [],
                options: [
                    { name: 'Drenthe', value: 'Drenthe' },
                    { name: 'Flevoland', value: 'Flevoland' },
                    { name: 'Friesland', value: 'Friesland' },
                    { name: 'Gelderland', value: 'Gelderland' },
                    { name: 'Groningen', value: 'Groningen' },
                    { name: 'Limburg', value: 'Limburg' },
                    { name: 'Noord-Brabant', value: 'Noord-Brabant' },
                    { name: 'Noord-Holland', value: 'Noord-Holland' },
                    { name: 'Overijssel', value: 'Overijssel' },
                    { name: 'Utrecht', value: 'Utrecht' },
                    { name: 'Zeeland', value: 'Zeeland' },
                    { name: 'Zuid-Holland', value: 'Zuid-Holland' },
                ],
                routing: {
                    request: {
                        qs: {
                            province: '={{ $value ? $value.join(",") : undefined }}',
                        },
                    },
                },
                description: 'Search companies by Dutch province',
            },
        ],
    },
    {
		displayName: 'Technology Filters',
		name: 'technologyFilterOptions',
		type: 'collection',
		default: {},
		placeholder: 'Add technology filter',
        description: 'Search companies by the apps they use',
		displayOptions: {
			show: {
				resource: ['companies'],
				operation: ['get'],
                simplify: [false],
			},
		},
		options: [
            {
                displayName: 'Include Apps',
                name: 'OR_apps',
                type: 'string',
                default: '',
                routing: {
                    request: {
                        qs: {
                            OR_apps: '={{ $value ? $value : undefined }}',
                        },
                    },
                },
                description: 'Search companies by apps they use. Comma separate multiple values.',
            },
            {
                displayName: 'Exclude Apps',
                name: 'NOT_apps',
                type: 'string',
                default: '',
                routing: {
                    request: {
                        qs: {
                            NOT_apps: '={{ $value ? $value : undefined }}',
                        },
                    },
                },
                description: 'Exclude companies using specific apps. Comma separate multiple values.',
            },
        ],
    },
    {
		displayName: 'Social Media Filters',
		name: 'socialFilterOptions',
		type: 'collection',
		default: {},
		placeholder: 'Add social media filter',
        description: 'Search companies by their social media presence and interactions',
		displayOptions: {
			show: {
				resource: ['companies'],
				operation: ['get'],
                simplify: [false],
			},
		},
		options: [
            {
                displayName: 'Has Social Media',
                name: 'social_exists',
                type: 'multiOptions',
                default: [],
                options: [
                    { name: 'Facebook', value: 'facebook' },
                    { name: 'Instagram', value: 'instagram' },
                    { name: 'LinkedIn', value: 'linkedin' },
                    { name: 'Pinterest', value: 'pinterest' },
                    { name: 'Twitter', value: 'twitter' },
                    { name: 'YouTube', value: 'youtube' },
                ],
                routing: {
                    request: {
                        qs: {
                            social_exists: '={{ $value ? $value.join(",") : undefined }}',
                        },
                    },
                },
                description: 'Search companies by the social media channels they have',
            },
            {
                displayName: 'Social Interactions',
                name: 'social_interactions',
                type: 'string',
                default: '',
                placeholder: 'e.g., 10:50 or 10: or :50',
                routing: {
                    request: {
                        qs: {
                            social_interactions: '={{ $value ? $value : undefined }}',
                        },
                    },
                },
                description: 'Search by Social Media likes received. Format: Range (10:50), Minimum only (10:), Maximum only (:50).',
            },
        ],
    },
    {
		displayName: 'Review Filters',
		name: 'reviewFilterOptions',
		type: 'collection',
		default: {},
		placeholder: 'Add review filter',
        description: 'Search companies by their reviews and ratings',
		displayOptions: {
			show: {
				resource: ['companies'],
				operation: ['get'],
                simplify: [false],
			},
		},
		options: [
            {
                displayName: 'Rating',
                name: 'rating',
                type: 'string',
                default: '',
                placeholder: 'e.g., 3:4 or 3: or :4',
                routing: {
                    request: {
                        qs: {
                            rating: '={{ $value ? $value : undefined }}',
                        },
                    },
                },
                description: 'Search by average review rating (0-5). Format: Range (3:4), Minimum only (3:), Maximum only (:4).',
            },
            {
                displayName: 'Reviews',
                name: 'reviews',
                type: 'string',
                default: '',
                placeholder: 'e.g., 50:100 or 50: or :100',
                routing: {
                    request: {
                        qs: {
                            reviews: '={{ $value ? $value : undefined }}',
                        },
                    },
                },
                description: 'Search by number of reviews. Format: Range (50:100), Minimum only (50:), Maximum only (:100).',
            },
        ],
    },
    {
		displayName: 'Linkpartner Filters',
		name: 'linkpartnerFilterOptions',
		type: 'collection',
		default: {},
		placeholder: 'Add linkpartner filter',
		displayOptions: {
			show: {
				resource: ['companies'],
				operation: ['get'],
                simplify: [false],
			},
		},
		options: [
            {
                displayName: 'Link Domain',
                name: 'linkdomain',
                type: 'string',
                default: '',
                routing: {
                    request: {
                        qs: {
                            linkdomain: '={{ $value ? $value : undefined }}',
                        },
                    },
                },
                description: 'Search companies by domains they link to on their website. Powerful for finding partners.',
            },
            {
                displayName: 'Linked By',
                name: 'linked_by',
                type: 'string',
                default: '',
                routing: {
                    request: {
                        qs: {
                            linked_by: '={{ $value ? $value : undefined }}',
                        },
                    },
                },
                description: 'Search companies by domains that link to their website. Powerful for finding partners of large companies.',
            },
            {
                displayName: 'Mentioned By',
                name: 'mentioned_by',
                type: 'string',
                default: '',
                routing: {
                    request: {
                        qs: {
                            mentioned_by: '={{ $value ? $value : undefined }}',
                        },
                    },
                },
                description: 'Search companies by domains that mention their company name. Powerful for finding partners.',
            },
            {
                displayName: 'Relation',
                name: 'relation',
                type: 'string',
                default: '',
                routing: {
                    request: {
                        qs: {
                            relation: '={{ $value ? $value : undefined }}',
                        },
                    },
                },
                description: 'Combination of linked_by, mentioned_by and linkdomain',
            },
        ],
    },
    {
		displayName: 'Web Rank Filters',
		name: 'webrankFilterOptions',
		type: 'collection',
		default: {},
		placeholder: 'Add web rank filter',
		displayOptions: {
			show: {
				resource: ['companies'],
				operation: ['get'],
                simplify: [false],
			},
		},
		options: [
            {
                displayName: 'DomCop Pagerank',
                name: 'pagerank',
                type: 'string',
                default: '',
                placeholder: 'e.g., 1:10 or 1: or :10',
                routing: {
                    request: {
                        qs: {
                            pagerank: '={{ $value ? $value : undefined }}',
                        },
                    },
                },
                description: 'Search by DomCop pagerank (0-10). Format: Range (1:10), Minimum only (1:), Maximum only (:10).',
            },
            {
                displayName: 'Crux Rank',
                name: 'crux_rank',
                type: 'string',
                default: '',
                placeholder: 'e.g., 100:500 or 100: or :500',
                routing: {
                    request: {
                        qs: {
                            crux_rank: '={{ $value ? $value : undefined }}',
                        },
                    },
                },
                description: 'Search by Crux rank (1 to 50m). Format: Range (100:500), Minimum only (100:), Maximum only (:500).',
            },
            {
                displayName: 'Tranco Rank',
                name: 'tranco_rank',
                type: 'string',
                default: '',
                placeholder: 'e.g., 100:500 or 100: or :500',
                routing: {
                    request: {
                        qs: {
                            tranco_rank: '={{ $value ? $value : undefined }}',
                        },
                    },
                },
                description: 'Search by Tranco rank (1 to 3m). Format: Range (100:500), Minimum only (100:), Maximum only (:500).',
            },
        ],
    },
    {
        displayName: 'Pagination Options',
		name: 'paginationOptions',
		placeholder: 'Add pagination options',
		type: 'collection',
		default: {},
		displayOptions: {
			show: {
				resource: ['companies'],
				operation: ['get'],
                simplify: [false],
			},
		},
		options: [
            {
                displayName: 'Results per Page (Rows)',
                name: 'rows',
                type: 'number',
                default: 10,
                description: 'Number of company profiles to return per page',
            },
            {
                displayName: 'Page Number',
                name: 'page',
                type: 'number',
                default: '',
                description: 'Page to return (when not returning all, 1-indexed, alternative to "Offset Results")',
                displayOptions: {
                    show: {
                        '/returnAll': [false],
                    }
                },
            },
            {
                displayName: 'Offset Results (Start)',
                name: 'start',
                type: 'number',
                default: '',
                description: 'Number of results to skip before starting (when not returning all, 0-indexed, alternative to "Page Number")',
                displayOptions: {
                    show: {
                        '/returnAll': [false],
                    }
                },
            },
        ],
    },
];

```

Contents of Bedrijfsdata/logo.svg:
```
<svg xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.dev/svgjs" width="91px" height="91px"><svg width="91px" height="91px" viewBox="0 0 91 91" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <title>Group 2</title>
    <g id="SvgjsG1015" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g id="SvgjsG1014" transform="translate(-19.000000, -18.000000)">
            <g id="SvgjsG1013" transform="translate(19.000000, 18.000000)">
                <path d="M57.0769231,80 C59.6296296,80 62,79.529042 64.1880342,78.5871261 C65.7196581,77.927785 67.0279202,77.0489315 68.1128205,75.9505657 L68.4250712,75.6143476 L68.4273504,79.1729519 L78,79.1729519 L78,27 L67.7435897,27 L67.7435897,44.7080191 L67.6259829,44.5857997 C66.8328205,43.8138882 65.928547,43.1482293 64.9131624,42.5888231 L64.2905983,42.2659298 C62.1709402,41.2321196 59.7435897,40.7152146 57.008547,40.7152146 C53.4529915,40.7152146 50.2393162,41.5882098 47.3675214,43.3342003 C44.4957265,45.0801907 42.2165242,47.4349805 40.5299145,50.3985696 C38.8433048,53.3621586 38,56.6818379 38,60.3576073 C38,63.9874296 38.8319088,67.295622 40.4957265,70.2821847 C42.1595442,73.2687473 44.4273504,75.6350238 47.2991453,77.3810143 C50.1709402,79.1270048 53.4301994,80 57.0769231,80 Z M58.3076923,70.6957087 C56.4387464,70.6957087 54.7635328,70.2592111 53.2820513,69.3862159 C51.8005698,68.5132206 50.6495726,67.295622 49.8290598,65.73342 C49.008547,64.171218 48.5982906,62.3792805 48.5982906,60.3576073 C48.5982906,58.3359341 49.008547,56.5554833 49.8290598,55.0162549 C50.6495726,53.4770264 51.8005698,52.2594278 53.2820513,51.363459 C54.7635328,50.4674902 56.4387464,50.0195059 58.3076923,50.0195059 C60.1766382,50.0195059 61.8176638,50.4560035 63.2307692,51.3289987 C64.6438746,52.2019939 65.7492877,53.4195925 66.5470085,54.9817945 C67.3447293,56.5439965 67.7435897,58.3359341 67.7435897,60.3576073 C67.7435897,62.3792805 67.3447293,64.171218 66.5470085,65.73342 C65.7492877,67.295622 64.6438746,68.5132206 63.2307692,69.3862159 C61.8176638,70.2592111 60.1766382,70.6957087 58.3076923,70.6957087 Z" id="SvgjsPath1012" fill="#0060C6" fill-rule="nonzero"></path>
                <path d="M32.9230769,65 C36.5698006,65 39.8290598,64.1270048 42.7008547,62.3810143 C45.5726496,60.6350238 47.8404558,58.2687473 49.5042735,55.2821847 C51.1680912,52.295622 52,48.9874296 52,45.3576073 C52,41.6818379 51.1566952,38.3621586 49.4700855,35.3985696 C47.7834758,32.4349805 45.5042735,30.0801907 42.6324786,28.3342003 C39.7606838,26.5882098 36.5470085,25.7152146 32.991453,25.7152146 C30.2564103,25.7152146 27.8290598,26.2321196 25.7094017,27.2659298 C24.4376068,27.8862159 23.325812,28.6595059 22.3740171,29.5857997 L22.2541311,29.7080191 L22.2564103,12 L12,12 L12,64.1729519 L21.5726496,64.1729519 L21.5726496,60.5867794 L21.9189744,60.9505657 C22.8639316,61.8920221 23.9606838,62.6722042 25.2092308,63.2911118 L25.8461538,63.5871261 C28.011396,64.529042 30.3703704,65 32.9230769,65 Z M31.3642857,56 C29.5547619,56 27.9375,55.5566667 26.5125,54.67 C25.0875,53.7833333 23.9791667,52.5466667 23.1875,50.96 C22.3958333,49.3733333 22,47.5533333 22,45.5 C22,43.4466667 22.3958333,41.6266667 23.1875,40.04 C23.9791667,38.4533333 25.0875,37.2166667 26.5125,36.33 C27.9375,35.4433333 29.5547619,35 31.3642857,35 C33.2642857,35 34.9380952,35.455 36.3857143,36.365 C37.8333333,37.275 38.9642857,38.5116667 39.7785714,40.075 C40.5928571,41.6383333 41,43.4466667 41,45.5 C41,47.5533333 40.5928571,49.3733333 39.7785714,50.96 C38.9642857,52.5466667 37.8333333,53.7833333 36.3857143,54.67 C34.9380952,55.5566667 33.2642857,56 31.3642857,56 Z" id="SvgjsPath1011" fill="#0075F2" fill-rule="nonzero"></path>
                <rect id="SvgjsRect1010" fill-opacity="0" fill="#FFFFFF" x="0" y="0" width="91" height="91"></rect>
            </g>
        </g>
    </g>
</svg><style>@media (prefers-color-scheme: light) { :root { filter: none; } }
@media (prefers-color-scheme: dark) { :root { filter: none; } }
</style></svg>
```

